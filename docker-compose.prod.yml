# docker-compose.prod.yml
version: '3.8'

services:
  # MongoDB database
  mongodb:
    image: mongo:6
    container_name: academic-portfolio-mongodb
    volumes:
      - mongodb_data:/data/db
    restart: always
    networks:
      - app-network
    # No direct port exposure in production
    
  # Backend API - Production Mode
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile.prod  # Using production Dockerfile
    container_name: academic-portfolio-backend
    volumes:
      - media_data:/app/media
    environment:
      - MONGODB_URI=mongodb://mongodb:27017
      - MONGODB_DB_NAME=academic_portfolio
      - SECRET_KEY=${SECRET_KEY}  # Set via environment variable
      - MEDIA_ROOT=/app/media
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - ADMIN_USERNAME=${ADMIN_USERNAME}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
    restart: always
    depends_on:
      - mongodb
    networks:
      - app-network
    
  # Frontend - Production Mode (Static files served by Nginx)
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile.prod  # Using production Dockerfile
    container_name: academic-portfolio-frontend
    restart: always
    depends_on:
      - backend
    networks:
      - app-network
    
  # Nginx for serving frontend and proxying API requests
  nginx:
    image: nginx:alpine
    container_name: academic-portfolio-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - backend
    restart: always
    networks:
      - app-network
      
  # Let's Encrypt SSL certificate manager
  certbot:
    image: certbot/certbot
    container_name: academic-portfolio-certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    depends_on:
      - nginx

networks:
  app-network:
    driver: bridge

volumes:
  mongodb_data:
  media_data: